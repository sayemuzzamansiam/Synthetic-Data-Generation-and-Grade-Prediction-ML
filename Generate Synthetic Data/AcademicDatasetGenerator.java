import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

class Student {
    private int studentId;
    private String studentName;
    private double studentCGPA;
    private int age;
    private String gender;
    private double attendance;
    private String academicStanding;
    private ArrayList<CourseGrade> courseGrades = new ArrayList<>();

    public Student(int studentId, String studentName, double studentCGPA, int age, 
                   String gender, double attendance, String academicStanding) {
        this.studentId = studentId;
        this.studentName = studentName;
        this.studentCGPA = studentCGPA;
        this.age = age;
        this.gender = gender;
        this.attendance = attendance;
        this.academicStanding = academicStanding;
    }

    public int getStudentId() { return studentId; }
    public String getStudentName() { return studentName; }
    public double getStudentCGPA() { return studentCGPA; }
    public int getAge() { return age; }
    public String getGender() { return gender; }
    public double getAttendance() { return attendance; }
    public String getAcademicStanding() { return academicStanding; }

    public void addCourseGrade(Course course, double grade, String semester) {
        courseGrades.add(new CourseGrade(course.getCourseId(), grade, semester));
    }

    public ArrayList<CourseGrade> getCourseGrades() { return courseGrades; }

    static class CourseGrade {
        private String courseId;
        private double grade;
        private String semester;

        public CourseGrade(String courseId, double grade, String semester) {
            this.courseId = courseId;
            this.grade = grade;
            this.semester = semester;
        }

        public String getCourseId() { return courseId; }
        public double getGrade() { return grade; }
        public String getSemester() { return semester; }
    }
}

class Course {
    private String courseId;
    private String courseTitle;
    private double credit;
    private String difficulty;
    private String semester;
    private String department;

    public Course(String courseId, String courseTitle, double credit, 
                  String difficulty, String semester, String department) {
        this.courseId = courseId;
        this.courseTitle = courseTitle;
        this.credit = credit;
        this.difficulty = difficulty;
        this.semester = semester;
        this.department = department;
    }

    public String getCourseId() { return courseId; }
    public String getCourseTitle() { return courseTitle; }
    public double getCredit() { return credit; }
    public String getDifficulty() { return difficulty; }
    public String getSemester() { return semester; }
    public String getDepartment() { return department; }
}

public class AcademicDatasetGenerator {
    private static ArrayList<Student> students = new ArrayList<>();
    private static ArrayList<Course> courses = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static Random rand = new Random();
    private static Set<Integer> usedStudentIds = new HashSet<>();
    private static Map<String, List<String>> coursePrerequisites = new HashMap<>();

    public static void main(String[] args) {
        initializeDefaultCourses();
        while (true) {
            System.out.println("\nMenu:");
            System.out.println("a. Add Entity");
            System.out.println("d. Print/Export Data");
            System.out.println("f. Auto Generate Data");
            System.out.println("x. Exit");
            System.out.print("Choose an option: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "a":
                    addEntity();
                    break;
                case "d":
                    exportData();
                    break;
                case "f":
                    autoGenerateData();
                    break;
                case "x":
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }

    private static void initializeDefaultCourses() {
        coursePrerequisites.put("CSE201", Arrays.asList("CSE101"));
        coursePrerequisites.put("CSE301", Arrays.asList("CSE201"));

        if (courses.isEmpty()) {
            courses.addAll(Arrays.asList(
                new Course("CSE101", "Intro to CS", 3.0, "Medium", "Fall 2023", "Computer Science"),
                new Course("CSE102", "Data Structures", 3.0, "Hard", "Spring 2024", "Computer Science"),
                new Course("MAT101", "Calculus I", 4.0, "Hard", "Fall 2023", "Mathematics"),
                new Course("ENG201", "Advanced Writing", 2.0, "Easy", "Spring 2024", "Humanities")
            ));
        }
    }

    private static void addEntity() {
        System.out.print("Add (Student/Course): ");
        String type = scanner.nextLine().toLowerCase();

        switch (type) {
            case "student":
                addStudent();
                break;
            case "course":
                addCourse();
                break;
            default:
                System.out.println("Invalid entity type!");
        }
    }

    private static void addStudent() {
        System.out.print("Enter Student ID: ");
        int id = Integer.parseInt(scanner.nextLine());
        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.print("CGPA (0-4): ");
        double cgpa = Double.parseDouble(scanner.nextLine());
        System.out.print("Age: ");
        int age = Integer.parseInt(scanner.nextLine());
        System.out.print("Gender: ");
        String gender = scanner.nextLine();
        System.out.print("Attendance (%): ");
        double attendance = Double.parseDouble(scanner.nextLine());

        String academicStanding = calculateAcademicStanding(cgpa);
        Student student = new Student(id, name, cgpa, age, gender, attendance, academicStanding);
        students.add(student);

        for (Course course : courses) {
            if (rand.nextDouble() > 0.5) { // 50% chance to enroll
                double grade = calculateRealisticGrade(student, course);
                student.addCourseGrade(course, grade, course.getSemester());
            }
        }
    }

    private static void addCourse() {
        System.out.print("Course ID: ");
        String id = scanner.nextLine();
        System.out.print("Title: ");
        String title = scanner.nextLine();
        System.out.print("Credit: ");
        double credit = Double.parseDouble(scanner.nextLine());
        System.out.print("Difficulty (Easy/Medium/Hard): ");
        String difficulty = scanner.nextLine();
        System.out.print("Semester: ");
        String semester = scanner.nextLine();
        System.out.print("Department: ");
        String department = scanner.nextLine();

        courses.add(new Course(id, title, credit, difficulty, semester, department));
    }

    private static void autoGenerateData() {
        System.out.print("Enter number of students to generate: ");
        int numStudents = Integer.parseInt(scanner.nextLine());

        List<String> semesters = Arrays.asList("Fall 2023", "Spring 2024", "Fall 2024");

        try (FileWriter gradeWriter = new FileWriter("grades.csv", true)) {
            // Write header only if file is empty
            if (new File("grades.csv").length() == 0) {
                gradeWriter.write("studentId,courseId,grade,semester,department\n");
            }

            for (int i = 0; i < numStudents; i++) {
                int studentId;
                do {
                    studentId = 100 + rand.nextInt(900);
                } while (usedStudentIds.contains(studentId));
                usedStudentIds.add(studentId);

                String studentName = "Student" + studentId;
                double cgpa = generateRealisticCGPA();
                int age = 18 + rand.nextInt(7);
                String gender = rand.nextDouble() < 0.55 ? "Female" : "Male";
                double attendance = 70 + (cgpa * 5) + (rand.nextDouble() * 10);
                String academicStanding = calculateAcademicStanding(cgpa);

                Student student = new Student(studentId, studentName, cgpa, age, gender, attendance, academicStanding);
                students.add(student);

                Set<String> completedCourses = new HashSet<>();
                for (String semester : semesters) {
                    int coursesThisSemester = 3 + (int)(cgpa);
                    List<Course> availableCourses = getEligibleCourses(semester, completedCourses);

                    Collections.shuffle(availableCourses);
                    for (int c = 0; c < Math.min(coursesThisSemester, availableCourses.size()); c++) {
                        Course course = availableCourses.get(c);
                        double grade = calculateRealisticGrade(student, course);

                        student.addCourseGrade(course, grade, semester);
                        completedCourses.add(course.getCourseId());

                        gradeWriter.write(String.format("%d,%s,%.2f,%s,%s\n", 
                            studentId, course.getCourseId(), grade, semester, course.getDepartment()));
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error writing grades: " + e.getMessage());
        }
        System.out.println(numStudents + " students generated!");
    }

    private static double generateRealisticCGPA() {
        double cgpa = rand.nextGaussian() * 0.8 + 2.8;
        return Math.max(1.5, Math.min(4.0, cgpa));
    }

    private static String calculateAcademicStanding(double cgpa) {
        if (cgpa >= 3.5) return "Dean's List";
        if (cgpa >= 3.0) return "Good Standing";
        if (cgpa >= 2.0) return "Probationary";
        return "Academic Warning";
    }

    private static List<Course> getEligibleCourses(String semester, Set<String> completed) {
        List<Course> eligible = new ArrayList<>();
        for (Course course : courses) {
            if (course.getSemester().equals(semester) && 
                completed.containsAll(coursePrerequisites.getOrDefault(course.getCourseId(), 
                Collections.emptyList()))) {
                eligible.add(course);
            }
        }
        return eligible;
    }

    private static double calculateRealisticGrade(Student student, Course course) {
        double baseGrade = student.getStudentCGPA() * 0.6;
        baseGrade += student.getAttendance() * 0.02;
        baseGrade += (student.getAcademicStanding().equals("Dean's List") ? 0.3 : 0);

        switch(course.getDifficulty()) {
            case "Hard": baseGrade -= 0.4; break;
            case "Medium": baseGrade -= 0.2; break;
            case "Easy": baseGrade += 0.1; break;
        }

        if (course.getDepartment().equals("Mathematics")) baseGrade -= 0.2;
        if (course.getDepartment().equals("Humanities")) baseGrade += 0.15;

        baseGrade += (rand.nextDouble() * 0.6 - 0.3);
        return Math.max(0.5, Math.min(4.0, baseGrade));
    }

    private static void exportData() {
        try {
            // Export students
            try (FileWriter writer = new FileWriter("students.csv")) {
                writer.write("studentId,name,cgpa,age,gender,attendance,academicStanding\n");
                for (Student s : students) {
                    writer.write(String.format("%d,%s,%.2f,%d,%s,%.1f,%s\n",
                            s.getStudentId(), s.getStudentName(), s.getStudentCGPA(),
                            s.getAge(), s.getGender(), s.getAttendance(), s.getAcademicStanding()));
                }
            }

            // Export courses
            try (FileWriter writer = new FileWriter("courses.csv")) {
                writer.write("courseId,title,credit,difficulty,semester,department\n");
                for (Course c : courses) {
                    writer.write(String.format("%s,%s,%.1f,%s,%s,%s\n",
                            c.getCourseId(), c.getCourseTitle(), c.getCredit(),
                            c.getDifficulty(), c.getSemester(), c.getDepartment()));
                }
            }

            System.out.println("Data exported to students.csv, courses.csv, and grades.csv!");
        } catch (IOException e) {
            System.out.println("Export error: " + e.getMessage());
        }
    }
}